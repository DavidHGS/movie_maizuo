{"remainingRequest":"E:\\vue_workspace\\movie\\node_modules\\_vue-loader@15.9.0@vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\vue_workspace\\movie\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js??ref--0-0!E:\\vue_workspace\\movie\\node_modules\\_vue-loader@15.9.0@vue-loader\\lib\\index.js??vue-loader-options!E:\\vue_workspace\\movie\\src\\views\\detail.vue?vue&type=template&id=68b3be6b&scoped=true&","dependencies":[{"path":"E:\\vue_workspace\\movie\\src\\views\\detail.vue","mtime":1584375080715},{"path":"E:\\vue_workspace\\movie\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_workspace\\movie\\node_modules\\_vue-loader@15.9.0@vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\vue_workspace\\movie\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_workspace\\movie\\node_modules\\_vue-loader@15.9.0@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}